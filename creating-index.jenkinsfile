pipeline {
    agent any

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    echo "Node version: $(node --version)"
                    echo "NPM version: $(npm --version)"

                    echo "Cleaning workspace..."
                    rm -rf node_modules package-lock.json
                    npm cache clean --force

                    echo "Installing dependencies..."
                    npm ci --no-audit --no-fund
                    npm install react-scripts --save

                    echo "Building the app..."
                    npm run build
                '''
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'node:18-alpine'
                    args '-u root'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    echo "Running tests..."
                    # Place test commands here (e.g., npm test or jest)
                    echo "TEST"
                '''
            }
        }
        /*
        stage('E2E') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    echo "Installing Playwright dependencies..."
                    npx playwright install --with-deps

                    echo "Installing serve..."
                    npm install serve

                    echo "Serving app in background..."
                    nohup node_modules/.bin/serve -s build &

                    echo "Running Playwright tests..."
                    npx playwright test --reporter=html
                '''
            }
        }
    }

    post {
        always {
            junit 'jest-results/junit.xml'
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                icon: '',
                keepAll: false,
                reportDir: 'playwright-report',
                reportFiles: 'index.html',
                reportName: 'Playwright HTML Report',
                reportTitles: '',
                useWrapperFileDirectly: true
            ])
        }
    }*/
}
